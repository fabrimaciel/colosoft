/* 
 * Colosoft Framework - generic framework to assist in development on the .NET platform
 * Copyright (C) 2013  <http://www.colosoft.com.br/framework> - support@colosoft.com.br
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml;

namespace Colosoft.Owin.Server
{
	/// <summary>
	/// Serializador do cache de tipos.
	/// </summary>
	sealed class TypeCacheSerializer
	{
		private static readonly Guid _mvcVersionId = typeof(TypeCacheSerializer).Module.ModuleVersionId;

		private DateTime CurrentDate
		{
			get
			{
				return CurrentDateOverride ?? DateTime.Now;
			}
		}

		internal DateTime? CurrentDateOverride
		{
			get;
			set;
		}

		/// <summary>
		/// Recupera os tipos serializados.
		/// </summary>
		/// <param name="input"></param>
		/// <returns></returns>
		[SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic", Justification = "This is an instance method for consistency with the SerializeTypes() method.")]
		public List<Type> DeserializeTypes(TextReader input)
		{
			XmlDocument doc = new XmlDocument();
			doc.Load(input);
			XmlElement rootElement = doc.DocumentElement;
			Guid readMvcVersionId = new Guid(rootElement.Attributes["mvcVersionId"].Value);
			if(readMvcVersionId != _mvcVersionId)
			{
				return null;
			}
			List<Type> deserializedTypes = new List<Type>();
			foreach (XmlNode assemblyNode in rootElement.ChildNodes)
			{
				string assemblyName = assemblyNode.Attributes["name"].Value;
				var assembly = System.Reflection.Assembly.Load(assemblyName);
				foreach (XmlNode moduleNode in assemblyNode.ChildNodes)
				{
					Guid moduleVersionId = new Guid(moduleNode.Attributes["versionId"].Value);
					foreach (XmlNode typeNode in moduleNode.ChildNodes)
					{
						string typeName = typeNode.InnerText;
						Type type = assembly.GetType(typeName);
						if(type == null || type.Module.ModuleVersionId != moduleVersionId)
						{
							return null;
						}
						else
						{
							deserializedTypes.Add(type);
						}
					}
				}
			}
			return deserializedTypes;
		}

		/// <summary>
		/// Serializa os tipos informados.
		/// </summary>
		/// <param name="types"></param>
		/// <param name="output"></param>
		public void SerializeTypes(IEnumerable<Type> types, TextWriter output)
		{
			var groupedByAssembly = from type in types
			group type by type.Module into groupedByModule
			group groupedByModule by groupedByModule.Key.Assembly;
			XmlDocument doc = new XmlDocument();
			doc.AppendChild(doc.CreateComment("This file is automatically generated. Please do not modify the contents of this file."));
			XmlElement typeCacheElement = doc.CreateElement("typeCache");
			doc.AppendChild(typeCacheElement);
			typeCacheElement.SetAttribute("lastModified", CurrentDate.ToString());
			typeCacheElement.SetAttribute("mvcVersionId", _mvcVersionId.ToString());
			foreach (var assemblyGroup in groupedByAssembly)
			{
				XmlElement assemblyElement = doc.CreateElement("assembly");
				typeCacheElement.AppendChild(assemblyElement);
				assemblyElement.SetAttribute("name", assemblyGroup.Key.FullName);
				foreach (var moduleGroup in assemblyGroup)
				{
					XmlElement moduleElement = doc.CreateElement("module");
					assemblyElement.AppendChild(moduleElement);
					moduleElement.SetAttribute("versionId", moduleGroup.Key.ModuleVersionId.ToString());
					foreach (Type type in moduleGroup)
					{
						XmlElement typeElement = doc.CreateElement("type");
						moduleElement.AppendChild(typeElement);
						typeElement.AppendChild(doc.CreateTextNode(type.FullName));
					}
				}
			}
			doc.Save(output);
		}
	}
}
