/* 
 * Colosoft Framework - generic framework to assist in development on the .NET platform
 * Copyright (C) 2013  <http://www.colosoft.com.br/framework> - support@colosoft.com.br
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.269
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Colosoft.Security.Remote.Client.TokenProviderServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TokenProviderServiceReference.ITokenProviderService")]
    internal interface ITokenProviderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenProviderService/Check", ReplyAction="http://tempuri.org/ITokenProviderService/CheckResponse")]
        Colosoft.Security.TokenConsultResult Check(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenProviderService/Ping", ReplyAction="http://tempuri.org/ITokenProviderService/PingResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Colosoft.Security.TokenConsultResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Colosoft.Security.TokenPingResultStatus))]
        Colosoft.Security.TokenPingResult Ping(string token);
        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ITokenProviderService/MarkMessageAsRead", ReplyAction = "http://tempuri.org/ITokenProviderService/MarkMessageAsReadResponse")]
        void MarkMessageAsRead(System.Collections.Generic.IEnumerable<int> dispatcherIds);
        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ITokenProviderService/CloseUserTokens", ReplyAction = "http://tempuri.org/ITokenProviderService/CloseUserTokensResponse")]
        void CloseUserTokens(int userId);
        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ITokenProviderService/CloseUserTokens2", ReplyAction = "http://tempuri.org/ITokenProviderService/CloseUserTokens2Response")]
        void CloseUserTokens2(int userId, string applicationName);
        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ITokenProviderService/SetProfile", ReplyAction = "http://tempuri.org/ITokenProviderService/SetProfileResponse")]
        Colosoft.Security.TokenSetProfileResult SetProfile(string token, int profileId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface ITokenProviderServiceChannel : Colosoft.Security.Remote.Client.TokenProviderServiceReference.ITokenProviderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class TokenProviderServiceClient : System.ServiceModel.ClientBase<Colosoft.Security.Remote.Client.TokenProviderServiceReference.ITokenProviderService>, Colosoft.Security.Remote.Client.TokenProviderServiceReference.ITokenProviderService {
        
        public TokenProviderServiceClient() {
        }
        
        public TokenProviderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TokenProviderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TokenProviderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TokenProviderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Colosoft.Security.TokenConsultResult Check(string token) {
            return base.Channel.Check(token);
        }
        
        public Colosoft.Security.TokenPingResult Ping(string token) {
            return base.Channel.Ping(token);
        }

        public void MarkMessageAsRead(System.Collections.Generic.IEnumerable<int> dispatcherIds)
        {
            base.Channel.MarkMessageAsRead(dispatcherIds);
        }

        public void CloseUserTokens(int userId)
        {
            base.Channel.CloseUserTokens(userId);
        }

        public void CloseUserTokens2(int userId, string applicationName)
        {
            base.Channel.CloseUserTokens2(userId, applicationName);
        }

        public Colosoft.Security.TokenSetProfileResult SetProfile(string token, int profileId)
        {
            return base.Channel.SetProfile(token, profileId);
        }
    }
}
