/* 
 * Colosoft Framework - generic framework to assist in development on the .NET platform
 * Copyright (C) 2013  <http://www.colosoft.com.br/framework> - support@colosoft.com.br
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Colosoft.Security.Remote.Client.AuthenticationHost {
    using System.Runtime.Serialization;
    using System;
    
       
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValidateUserResult", Namespace="http://schemas.datacontract.org/2004/07/Colosoft.Security.Remote.Server")]
    [System.SerializableAttribute()]
    internal partial class ValidateUserResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Colosoft.Security.Remote.Client.AuthenticationHost.CaptchaInfo CaptchaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTimeOffset> ExpireDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Colosoft.Security.Remote.Client.AuthenticationHost.AuthenticationStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Colosoft.Security.Remote.Client.ServerHost.User UserField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Colosoft.Net.ServiceAddress UserProviderServiceAddressField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Colosoft.Net.ServiceAddress ProfileProviderServiceAddressField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Colosoft.Net.ServiceAddress ServiceAddressProviderServiceAddressField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal Colosoft.Security.Remote.Client.AuthenticationHost.CaptchaInfo Captcha {
            get {
                return this.CaptchaField;
            }
            set {
                if ((object.ReferenceEquals(this.CaptchaField, value) != true)) {
                    this.CaptchaField = value;
                    this.RaisePropertyChanged("Captcha");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.Nullable<System.DateTimeOffset> ExpireDate {
            get {
                return this.ExpireDateField;
            }
            set {
                if ((this.ExpireDateField.Equals(value) != true)) {
                    this.ExpireDateField = value;
                    this.RaisePropertyChanged("ExpireDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal Colosoft.Security.Remote.Client.AuthenticationHost.AuthenticationStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Token {
            get {
                return this.TokenField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenField, value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal Colosoft.Security.Remote.Client.ServerHost.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        internal Colosoft.Net.ServiceAddress UserProviderServiceAddress
        {
            get { return UserProviderServiceAddressField; }
            set
            {
                if ((object.ReferenceEquals(UserProviderServiceAddressField, value) != true))
                {
                    this.UserProviderServiceAddressField = value;
                    this.RaisePropertyChanged("UserProviderServiceAddress");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        internal Colosoft.Net.ServiceAddress ProfileProviderServiceAddress
        {
            get { return ProfileProviderServiceAddressField; }
            set
            {
                if ((object.ReferenceEquals(ProfileProviderServiceAddressField, value) != true))
                {
                    this.ProfileProviderServiceAddressField = value;
                    this.RaisePropertyChanged("ProfileProviderServiceAddress");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        internal Colosoft.Net.ServiceAddress ServiceAddressProviderServiceAddress
        {
            get { return ServiceAddressProviderServiceAddressField; }
            set
            {
                if ((object.ReferenceEquals(ServiceAddressProviderServiceAddressField, value) != true))
                {
                    this.ServiceAddressProviderServiceAddressField = value;
                    this.RaisePropertyChanged("ServiceAddressProviderServiceAddress");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CaptchaInfo", Namespace="http://schemas.datacontract.org/2004/07/Colosoft.Security.CaptchaSupport")]
    [System.SerializableAttribute()]
    internal partial class CaptchaInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid UidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal byte[] Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.Guid Uid {
            get {
                return this.UidField;
            }
            set {
                if ((this.UidField.Equals(value) != true)) {
                    this.UidField = value;
                    this.RaisePropertyChanged("Uid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
        
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthenticationStatus", Namespace="http://schemas.datacontract.org/2004/07/Colosoft.Security")]
    internal enum AuthenticationStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidUserNameOrPassword = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomain = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PasswordExpired = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PasswordWarning = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ErrorInValidate = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CaptchaRequired = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCaptcha = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ErrorTokenControl = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateToken = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ErrorInCommunication = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownError = 11,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChangePasswordResult", Namespace="http://schemas.datacontract.org/2004/07/Colosoft.Security")]
    [System.SerializableAttribute()]
    internal partial class ChangePasswordResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChangePasswordStatus StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal ChangePasswordStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true))
                {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AuthenticationHost.IAuthenticationService")]
    internal interface IAuthenticationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ValidateUser", ReplyAction="http://tempuri.org/IAuthenticationService/ValidateUserResponse")]
        Colosoft.Security.Remote.Client.AuthenticationHost.ValidateUserResult ValidateUser(string userName, string password, string servicesContext, SecurityParameter[] parameters);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAuthenticationService/ValidateToken", ReplyAction = "http://tempuri.org/IAuthenticationService/ValidateTokenResponse")]
        Colosoft.Security.Remote.Client.AuthenticationHost.ValidateUserResult ValidateToken(string token, string servicesContext);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAuthenticationService/LogOut", ReplyAction = "http://tempuri.org/IAuthenticationService/LogOutResponse")]
        bool LogOut(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/Check", ReplyAction="http://tempuri.org/IAuthenticationService/CheckResponse")]
        TokenConsultResult Check(string userName, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ChangePassword", ReplyAction="http://tempuri.org/IAuthenticationService/ChangePasswordResponse")]
        Colosoft.Security.Remote.Client.AuthenticationHost.ChangePasswordResult ChangePassword(string userName, string oldPassword, string newPassword, SecurityParameter[] parameters);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAuthenticationService/RequestPasswordReset", ReplyAction = "http://tempuri.org/IAuthenticationService/RequestPasswordResetResponse")]
        Colosoft.Security.ResetPasswordProcessResult RequestPasswordReset(string userName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAuthenticationService/ResetPassword", ReplyAction = "http://tempuri.org/IAuthenticationService/ResetPasswordResponse")]
        Colosoft.Security.Remote.Client.AuthenticationHost.ChangePasswordResult ResetPassword(string userName, string resetCode, string newPassword, params SecurityParameter[] parameters);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface IAuthenticationServiceChannel : Colosoft.Security.Remote.Client.AuthenticationHost.IAuthenticationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class AuthenticationServiceClient : System.ServiceModel.ClientBase<Colosoft.Security.Remote.Client.AuthenticationHost.IAuthenticationService>, Colosoft.Security.Remote.Client.AuthenticationHost.IAuthenticationService {
        
        public AuthenticationServiceClient() {
        }
        
        public AuthenticationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthenticationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Colosoft.Security.Remote.Client.AuthenticationHost.ValidateUserResult ValidateUser(string userName, string password, string servicesContext, SecurityParameter[] parameters) {
            return base.Channel.ValidateUser(userName, password, servicesContext, parameters);
        }

        public Colosoft.Security.Remote.Client.AuthenticationHost.ValidateUserResult ValidateToken(string token, string servicesContext)
        {
            return base.Channel.ValidateToken(token, servicesContext);
        }

        public bool LogOut(string token)
        {
            return base.Channel.LogOut(token);
        }

        public TokenConsultResult Check(string userName, string token)
        {
            return base.Channel.Check(userName, token);
        }
        
        public Colosoft.Security.Remote.Client.AuthenticationHost.ChangePasswordResult ChangePassword(string userName, string oldPassword, string newPassword, SecurityParameter[] parameters) {
            return base.Channel.ChangePassword(userName, oldPassword, newPassword, parameters);
        }

        public Colosoft.Security.ResetPasswordProcessResult RequestPasswordReset(string userName)
        {
            return base.Channel.RequestPasswordReset(userName);
        }

        public Colosoft.Security.Remote.Client.AuthenticationHost.ChangePasswordResult ResetPassword(string userName, string resetCode, string newPassword, params SecurityParameter[] parameters)
        {
            return base.Channel.ResetPassword(userName, resetCode, newPassword, parameters);
        }
    }
}
